#!perl

# PODNAME: fb11-dbh
# ABSTRACT: works with L<OpusVL::FB11::DeploymentHandler> to manage your database

use strict;
use warnings;
use 5.014;

use Pod::Usage;
use Try::Tiny;
use OpusVL::FB11::DeploymentHandler;
use Getopt::Long qw(:config gnu_getopt);
use File::ShareDir 'module_dir';
use File::Find;
use File::Path;
use List::Util qw/min/;

my %option = (
    help => sub { pod2usage(verbose => 2) },
);
GetOptions(\%option, 
    'target|t=s', 
    'help|h|?', 
    'connection-info|c=s', 
    'user|u=s', 
    'password|p=s', 
    'force|f',
    'prepare|ddl',
    'verbose|v',
    'deploy|d',
    'dirty',
);

my $module = shift;
my $command = shift;

unless ($module && $command) {
    pod2usage(
        verbose => 0, 
        exitval => 1, 
        message => "Missing schema name or command"
    );
}

eval "require $module" or die $@;

sub schema () {
    state $schema = $module->connect({
        dsn => $option{'connection-info'} // '',
        user => $option{'user'},
        password => $option{'password'},
    });
}

sub version () {
    $option{target} // $module->schema_version
        or die "Could not determine version from $module";
}


sub dh() {
    state $dh = OpusVL::FB11::DeploymentHandler->new({ 
        schema => schema,
        force_overwrite  => $option{force},
        #script_directory => module_dir($module) . '/sql',
        txn_wrap => !$option{dirty},
        to_version => version,
    });
}
my %command = (
    init => \&init,
    downgrade => \&downgrade,
    upgrade => \&upgrade,
    deploy => \&deploy,
    'set-version' => \&set_version,
    prepare => \&prepare,
    cleanup => \&cleanup,
);

unless ($command{$command}) {
    pod2usage(
        verbose => 0, 
        exitval => 1, 
        message => "Unknown command $command"
    );
}

$command{$command}->();

sub _ignoring_existing_files(&);

sub init {
    if ($option{prepare}) {
        _ignoring_existing_files {
            say "Creating version table SQL";
            dh->prepare_version_storage_install;
        };
    }

    say "Creating version table...";
    dh->install_version_storage({
        version => version
    });

    set_version();
}

sub set_version {
    try {
        dh->add_database_version({ 
            version => version 
        });
        say "Database set to version " . version;
    }
    catch {
        if (/Key.+already exists/) {
            say "Already on version " . version;
            return 0;
        }
        else {
            die $_;
        }
    };
}

sub upgrade {
    # We always prepare the upgrade for just one version. If we can't get
    # to $version-1 from where we are, someone else screwed up.
    if ($option{prepare}) {
        say "Preparing upgrade from " . (version - 1) . " to " . version;
        _ignoring_existing_files {
            dh->prepare_deploy;
        };

        _ignoring_existing_files {
            dh->prepare_upgrade({
                from_version => version - 1,
                to_version => version,
            });
        };
    }

    say sprintf "Upgrading %s -> %s", dh->database_version, version;
    dh->upgrade;
}

sub deploy {
    if ($option{prepare}) {
        _ignoring_existing_files {
            say "Preparing deployment SQL for version " . version;
            dh->prepare_deploy;
        };
    }
    
    say "Deploying version " . version;
    dh->install({
        version => version
    });
}

sub prepare {
    my ($to, $from) = split /-/, version;

    # If both are specified, it was --target 1-2; else it was --target 1, or not
    # specified (so we use schema_version)
    # We don't support 0 - that's what 'version' and --deploy are for
    ($to, $from) = ($from, $to) if $from and $to;

    if ($to eq 'version') {
        say "Creating version table SQL.";
        dh->prepare_version_storage_install;
        return;
    }

    # This awkward logic means we can prepare [$from, $to] without loading the
    # schema, avoiding the need to connect
    if (($from && $to) or
        $to != $module->schema_version)
    {
        $from ||= $module->schema_version;

        say "Creating SQL for $from -> $to";
        # Note this assumes we're using integer version numbers. DH might be
        # able to tell me what "one step" looks like
        warn "Preparing a step of more than one version is not advised"
            if abs($from - $to) != 1;

        _ignoring_existing_files {
            dh->prepare_upgrade({
                from_version => $from,
                to_version => $to,
            })
        };
    }
    else { # to (--target) == schema version
        if ($option{deploy}) {
            say "Creating deployment files for $to";
            _ignoring_existing_files {
                dh->prepare_deploy
            };
        }
        else {
            say sprintf "Creating SQL for %s -> %s", $to - 1, $to;
            _ignoring_existing_files {
                dh->prepare_upgrade({
                    from_version => $to - 1,
                    to_version => $to
                });
            };
        }
    }
}

sub cleanup {
    find(sub {
            # Not datamabases
            return $File::Find::prune = 1 if /_source/;
            return $File::Find::prune = 1 if /_common/;

            # Keep upgrade doodahs
            return $File::Find::prune = 1 if /upgrade/;
            return $File::Find::prune = 1 if /downgrade/;

            # Keep the *first* deployment SQL. This should be 1 but in at least
            # one case we started at 4 (like star wars)
            if (/\d/) {
                # No need to descend into deploy dirs
                $File::Find::prune = 1;

                opendir my $dir, $File::Find::dir;
                my ($first) = min grep /\d/, readdir $dir;
                close $dir;
                if ($_ > $first) {
                    rmtree($_);
                    say "Unlinked $File::Find::name; (later than $first)" if $option{verbose};
                }
            }
        },
        module_dir($module) . '/sql'
    );
}

sub _ignoring_existing_files(&) {
    my $coderef = shift;
    try {
        $coderef->();
    }
    catch {
        if (/Cannot overwrite/) {
            if ($option{verbose}) {
                say "INFO: Ignoring message: $_";
            }
            return;
        }
        die $_;
    };
}

=head1 SYNOPSIS

    fb11-dbh [--help|-h|-?] [--target|-t VERSION] [--connection-info|-c DSN]
        [--force|-f] [--prepare|--ddl] [--user|-u USER] [--password|-p PASSWORD]
        [--verbose|-v] SCHEMA COMMAND


=head1 DESCRIPTION

Works with OpusVL::FB11::DeploymentHandler to upgrade or downgrade the database
between versions.

I<SCHEMA> is the module name of the schema, e.g. C<MyApp::DBIC::Schema>.
I<COMMAND> is one of the commands listed below.

In general:

=over

=item If you don't have any DeploymentHandler infrastructure yet, use C<deploy>.

=item If you have the app's tables but not the versioning table, use C<init>.
You will need to version your schema first.

=item If you have both, use C<upgrade>.

=item If you have the DH versioning table but not the app's own tables, you
might as well just start again. That table holds no value.

=back

To perform an upgrade without releasing a new version of the schema, you can use
C<-f> to recreate the current version's source files.

=head1 COMMANDS

=head2 deploy

Deploys the entire lot at the target version. If you don't have the source files
for this yet, either use L<prepare> or provide the C<--prepare> option. 

=head2 set-version

If you have the tables but you've gone out of sync, use this with C<--target> to
set the current version in the versioning table.

=head2 upgrade

Upgrades one step at a time until the DB version equals the schema version.
Requires that you have the C<sql/DBTYPE/upgrade/X-Y/*> files in the module's
sharedir, where X-Y represents each stepwise increment up to the current
version.

If you don't have those, C<--prepare> or the L<prepare> command can create the
very latest step for you; but if you need previous versions, someone screwed up
and you'll have to attend to it manually.

=head2 prepare

With prepare, C<--target> may be a range, in the form of 
I<< <version> >>-I<< <version> >>. This will prepare the upgrade files for this
version range. This requires the YAML files for those two versions.

If C<--target> is not a range, then it must be considered part of a range, and
the current version is considered to be the other part. The exception is that if
the target version I<is> the current version, we prepare an upgrade from the
previous version instead. This is the default when C<--target> is not specified.

With C<--deploy>, the files to deploy the current version are created. We cannot
prepare a different version, because we don't have the code for that. Note that
C<--target> takes priority.

If the target version is literally C<version>, we prepare the table that DH
itself uses to track versions.

    # Prepares an upgrade from the current version to 10
    # Requires source (YAML) files for version 10
    fb11-dbh MyApp::DB::Schema --target 10 prepare
    
    # Requires _source/deploy/9 and _source/deploy/10 YAML files. Prepares
    # */upgrade/9-10 SQL files
    fb11-dbh MyApp::DB::Schema --target 9-10 prepare


    # Prepare a full deployment of the current version
    fb11-dbh MyApp::DB::Schema --deploy prepare

prepare will I<never> connect to the database; it only ever uses existing YAML
files from previous versions, and the value of C<schema_version> from your
module.

Recommended practice is to run C<prepare --deployment> when you first create
your module, and then subsequently just run C<prepare> with no arguments
whenever you increment your schema version. This produces a single deployment of
your initial database state, and then an unbroken series of incremental changes.
It is rare that an upgrade would merge two versions.

=head2 init

Deploys just the DH versioning table, and registers the current schema version
therein.

You should use this when converting an existing schema to DH. This means you
will have to convert your versioning system to use integers.

Note that you will have to use the C<--target> option, because the SQL that
creates this table will be in the deployment files, which exist only for the
first version; if you try to init with the current version, you will get an
error about SQL files that can't be found.

    fb11-dbh -c dbi:Pg:dbname=mydb MyApp::DB::Schema --target 1 init

=head2 cleanup

Removes stuff not required for actual deployment. Everything this leaves behind
should be in version control.

Even though this doesn't use the database you currently still have to provide it
a connection string.

=head1 OPTIONS

=head2 --prepare

=head2 --ddl

When performing a command that requires SQL or DDL (YAML) source files, prepare
them first. The default is to assume that these files are already available in
the module's sharedir.

If the source files already exist, this will be noted on STDOUT and processing
continues. You may have them replaced by providing the C<--force> option.

You cannot prepare source files for a version you are not on. Past versions
should be in version control. This basically runs the L<prepare> command with
sensible defaults.

Note when I tried it it didn't produce source files with C<update>, so don't
rely on this to update your DDL files correctly for release - instead run
C<prepare> first.

=head2 --deploy

=head2 -d

Prepare a deployment instead of an upgrade. By default, L<C<prepare>|/prepare>
will create the upgrade from the previous version to the current one. This
option creates a complete deployment at the current version.

=head2 --force

=head2 -f

Force overwriting of source files. Use this to redeploy the current version
during development.

=head2 --connection-info=DSN

=head2 -c DSN

Provide a connection string (DSN) for the database.

    deploy.pl -c dbi:Pg:dbname=mydb

=head2 --target VERSION[-VERSION]

=head2 -t VERSION[-VERSION]

Target this version number. Not all commands accept a target. Some commands
accept a range.

Defaults to the current schema version.

The special target 'version' is used to prepare the version table files.

=head2 --user=USER

=head2 -u USER

Username with which to connect to the database. Not used if not provided.

=head2 --password=PASSWORD

=head2 -p PASSWORD

Password with which to connect to the database. Not used if not provided.

=head2 --verbose

=head2 -v

Report when existing files are ignored. Default is to silently ignore them. Has
no effect when C<--force> is used.

=head2 --dirty

This performs database operations without a transaction wrapping them.  In
normal operation if an operation fails the whole update fails causing the
database state to remain as it was before.  On a development machine where
things are slightly inconsistent (perhaps you created fields manually) it can be
useful to just force through the operations and live with whatever errors
occurred.  This generally shouldn't be done on production machines if possible.

=head1 EXAMPLE PROCEDURE

=head2 Development

=over

=item 1. Increment the value returned from C<MyApp::DB::Schema->schema_version>.

=item 2. Make changes to your Result classes. These define your schema.

=item 3. If this is the first version, deploy. If not, upgrade.

    fb11-dbh -c dbi:Pg:dbname=mydb MyApp::DB::Schema --prepare -f deploy
    fb11-dbh -c dbi:Pg:dbname=mydb MyApp::DB::Schema --prepare -f upgrade

This will create YAML files that represent the schema (C<_source/deploy/*>), and
the SQL associated therewith (C<PostgreSQL/deploy/*> and
C<PostgreSQL/upgrade/*-*/>).

You may wish to create the SQL and YAML without running it.

    fb11-dbh MyApp::DB::Schema -f prepare
    fb11-dbh MyApp::DB::Schema -t version -f prepare

The special target 'version' creates the files for the DH versioning table
without installing it. Note that no connection string is required.

=item 4. If you have more changes to make, GOTO 2. The files will be overwritten
as needed.

=item 5. If you need to, you can edit the SQL files. If you re-run prepare, you
will lose these changes.

=item 6. Run cleanup. Commit what's left.

=item 7. Release all of this. GOTO 1.

=back

=head2 Production

=over

=item 1. Install the latest version of C<MyApp::DB::Schema>.

=item 2. If a new database, use C<deploy>. If not, use C<upgrade>

    fb11-dbh -c dbi:Pg:dbname=mydb_prod MyApp::DB::Schema deploy
    fb11-dbh -c dbi:Pg:dbname=mydb_prod MyApp::DB::Schema upgrade

=item 3. Log out. Make coffee.

=back

Production deployment relies on your having correctly created the necessary
deployment and upgrade SQL files and added them to the distribution. The script
ensures that the module's sharedir is used to create and find these files, so as
long as the deployment process is using sharedir (which it will, because of
Dist::Zilla), you should always have the required files, and DH will just
straight up run them.

=head1 TODO

=over

=item Ask DeploymentHandler to get the versioning scheme, rather than assuming int.

=item Use environment variables for stuff

=back
